@{
    ViewData["Title"] = "Home Page";
    
}


<div>
    <h1>Casi di CoronaVirus - Live</h1>
</div>
<div id="world"></div>
        
<script>
    var Map =(function (namespace) {
        /*var defaultOptions = {
           scope: 'world', //currently supports 'usa' and 'world', however with custom map data you can specify your own
           setProjection: setProjection, //returns a d3 path and projection functions
           projection: 'equirectangular', //style of projection to be used. try "mercator"
           height: null, //if not null, datamaps will grab the height of 'element'
           width: null, //if not null, datamaps will grab the width of 'element'
           responsive: false, //if true, call `resize()` on the map object when it should adjust it's size
           done: function () { }, //callback when the map is done drawing
           fills: {
               defaultFill: '#ABDDA4' //the keys in this object map to the "fillKey" of [data] or [bubbles]
           },
           dataType: 'json', //for use with dataUrl, currently 'json' or 'csv'. CSV should have an `id` column
           dataUrl: null, //if not null, datamaps will attempt to fetch this based on dataType ( default: json )
           geographyConfig: {
               dataUrl: null, //if not null, datamaps will fetch the map JSON (currently only supports topojson)
               hideAntarctica: true,
               borderWidth: 1,
               borderOpacity: 1,
               borderColor: '#FDFDFD',
               popupTemplate: function (geography, data) { //this function should just return a string
                   return '<div class="hoverinfo"><strong>' + geography.properties.name + '</strong></div>';
               },
               popupOnHover: true, //disable the popup while hovering
               highlightOnHover: true,
               highlightFillColor: '#FC8D59',
               highlightBorderColor: 'rgba(250, 15, 160, 0.2)',
               highlightBorderWidth: 2,
               highlightBorderOpacity: 1
           },
           bubblesConfig: {
               borderWidth: 2,
               borderOpacity: 1,
               borderColor: '#FFFFFF',
               popupOnHover: true,
               radius: null,
               popupTemplate: function (geography, data) {
                   return '<div class="hoverinfo"><strong>' + data.name + '</strong></div>';
               },
               fillOpacity: 0.75,
               animate: true,
               highlightOnHover: true,
               highlightFillColor: '#FC8D59',
               highlightBorderColor: 'rgba(250, 15, 160, 0.2)',
               highlightBorderWidth: 2,
               highlightBorderOpacity: 1,
               highlightFillOpacity: 0.85,
               exitDelay: 100,
               key: JSON.stringify
           },
           arcConfig: {
               strokeColor: '#DD1C77',
               strokeWidth: 1,
               arcSharpness: 1,
               animationSpeed: 600
           }
       };*/
        var bombMap = new Datamap({
            element: document.getElementById('world'),
            scope: 'world',
            responsive: true,

            geographyConfig: {
                popupOnHover: true,
                highlightOnHover: false
            },

            fills: {
                'USA': '#1f77b4',
                'RUS': '#9467bd',
                'PRK': '#ff7f0e',
                'PRC': '#2ca02c',
                'IND': '#e377c2',
                'GBR': '#8c564b',
                'FRA': '#d62728',
                'PAK': '#7f7f7f',
                defaultFill: '#333745'
            },
            data: {
                'RUS': { fillKey: 'RUS' },
                'PRK': { fillKey: 'PRK' },
                'PRC': { fillKey: 'PRC' },
                'IND': { fillKey: 'IND' },
                'GBR': { fillKey: 'GBR' },
                'FRA': { fillKey: 'FRA' },
                'PAK': { fillKey: 'PAK' },
                'USA': { fillKey: 'USA' }
            }
        });
        bombMap.resize();

        var cases = [];
        $.ajax(
            {
                type: 'GET',
                dataType: 'JSON',
                url: '/api/covid/data/all',
                success:
                    (response) => {
                        // Draw.
                        databuild(response)
                    }
            });
        var databuild = function (response) {
            //var template = {
            //    name: 'Not a bomb, but centered on Brazil',
            //    radius: 23,
            //    centered: 'BRA',
            //    country: 'USA',
            //    yeild: 0,
            //    fillKey: 'USA',
            //    date: '1954-03-01'
            //};
            for (var state of response) {
                //console.log(template);
                var radius;
                if (state.confirmed > 1000) {
                    radius = state.confirmed / 1000;
                }
                if (state.confirmed < 1000) {
                    radius = state.confirmed / 50;
                }
                if (state.confirmed < 100) {
                    radius = state.confirmed / 5;
                }
                if (state.confirmed < 10) {
                    radius = state.confirmed;
                }
                cases.push({
                    name: 'Covid-19 in ' + state.country,
                    radius: radius,
                    confermati: state.confirmed,
                    guariti: state.recovered,
                    morti: state.deaths,
                    centered: state.id,
                    country: state.id,
                    date: state.lastUpdate,
                    longitude: state.longitude,
                    latitude: state.latitude

                });
            }
            bombMap.bubbles(cases, {
                popupTemplate: function (geo, data) {
                    return ['<div class="hoverinfo">' + data.name,
                    '<br/>Casi: ' + data.confermati + '',
                    '<br/>Country: ' + data.country + '',
                    '<br/>Morti: ' + data.morti + '',
                    '<br/>Date: ' + data.date + '',
                        '</div>'].join('');
                }
            });
        };
        console.log(cases);
        namespace.cases = cases;
    }(Map || {}))

</script>